package com.epro.comp.im.service

import android.app.Activity
import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.text.TextUtils
import com.epro.comp.im.listener.ChatMessageChangeEvent
import com.epro.comp.im.listener.ConnectSuccessEvent
import com.epro.comp.im.mvp.model.bean.MsgBody
import com.epro.comp.im.mvp.model.bean.User
import com.epro.comp.im.smack.SmackManager
import com.epro.comp.im.utils.IMBusManager
import com.mike.baselib.net.exception.ApiException
import com.mike.baselib.net.exception.ErrorStatus
import com.mike.baselib.net.exception.ExceptionHandle
import com.mike.baselib.rx.scheduler.SchedulerUtils
import com.mike.baselib.utils.*
import io.reactivex.Observable
import io.reactivex.disposables.CompositeDisposable
import io.reactivex.disposables.Disposable
import org.greenrobot.eventbus.EventBus
import org.jivesoftware.smack.ConnectionListener
import org.jivesoftware.smack.StanzaListener
import org.jivesoftware.smack.XMPPConnection
import org.jivesoftware.smack.chat2.Chat
import org.jivesoftware.smack.chat2.IncomingChatMessageListener
import org.jivesoftware.smack.chat2.OutgoingChatMessageListener
import org.jivesoftware.smack.filter.AndFilter
import org.jivesoftware.smack.filter.StanzaFilter
import org.jivesoftware.smack.filter.StanzaTypeFilter
import org.jivesoftware.smack.packet.Message
import org.jivesoftware.smack.packet.Presence
import org.jivesoftware.smack.packet.Stanza
import org.jivesoftware.smackx.filetransfer.FileTransferListener
import org.jivesoftware.smackx.ping.PingFailedListener
import org.jivesoftware.smackx.ping.PingManager
import org.jxmpp.jid.EntityBareJid
import org.jxmpp.jid.impl.JidCreate


/**
 * 即时通讯服务,长连接
 */
class IMService : Service() {
    companion object {
        fun startIMService(activity: Activity, csId: String) {
            activity.startService(Intent(activity, IMService::class.java).putExtra("csId", csId))
        }

        fun stopIMService(activity: Activity) {
            activity.stopService(Intent(activity, IMService::class.java))
        }
    }

    private var compositeDisposable = CompositeDisposable()

    fun addSubscription(disposable: Disposable) {
        compositeDisposable.add(disposable)
    }

    fun clearSubscription() {
        if (!compositeDisposable.isDisposed) {
            compositeDisposable.clear()
        }
    }

    override fun onBind(p0: Intent?): IBinder? {
        return null
    }

    /**
     * 聊天接收监听
     */

    var incomingChatMessageListener: IncomingChatMessageListener = object : IncomingChatMessageListener {
        override fun newIncomingMessage(from: EntityBareJid?, message: Message?, chat: Chat?) {

            if (chat != null) {
                LogTools.debug("IMService", message.toString())
                if (message != null && !TextUtils.isEmpty(message.body)) {
                    LogTools.debug("IMService", message.toString() + "###" + message.body)
                    val disposable = Observable.just(true).flatMap {
                        val listenners = ReflectionUtils.getFieldValue(SmackManager.getInstance().chatManager, "incomingListeners") as Set<*>
                        LogTools.debug("IMService", listenners.size)
                        val msg = IMBusManager.saveRecvTextMsgToLocal<MsgBody>(message)
                        IMBusManager.updateRecord(msg!!)
                        return@flatMap Observable.just(msg)
                    }.compose(SchedulerUtils.ioToMain()).subscribe({ bean ->
                        val event = ChatMessageChangeEvent<MsgBody>()
                        event.message = bean
                        EventBus.getDefault().post(event)
                    }, { throwable ->
                        //处理异常
                        ExceptionHandle.handleException(throwable)
                    })
                    addSubscription(disposable)
                }
            }
        }
    }

    var outgoingChatMessageListener: OutgoingChatMessageListener = object : OutgoingChatMessageListener {
        override fun newOutgoingMessage(to: EntityBareJid?, message: Message?, chat: Chat?) {

        }
    }
    var fileTransferListener: FileTransferListener = FileTransferListener { request ->

    }
    /**
     * 连接监听
     */
    var connectListener = object : ConnectionListener {
        override fun connected(connection: XMPPConnection?) {

        }
        override fun connectionClosed() {
            LogTools.debug("IMService", "connectionClosed")
            startReconnect()
        }

        override fun connectionClosedOnError(e: Exception?) {
            LogTools.debug("IMService", "connectionClosedOnError")
            startReconnect()
        }

        override fun authenticated(connection: XMPPConnection?, resumed: Boolean) {

        }

    }

    var pingFailedListener = object : PingFailedListener {
        override fun pingFailed() {
            LogTools.debug("IMService", "pingFailed")
            startReconnect()
        }
    }

    var stanzaListener = object : StanzaListener {
        override fun processStanza(packet: Stanza?) {
            LogTools.debug("IMService", packet?.from)
            if (packet is Presence) {
                LogTools.debug("IMService", packet.toString())
            }
        }

    }

    //开始重连
    private fun startReconnect() {
        if (rxTimer.isDisposed) {
            rxTimer.interval(10 * 1000, RxTimer.IRxNext {
                login(csId, true)
            })
        }
    }

    override fun onCreate() {
        super.onCreate()
        if (AppBusManager.isLogin()) {
            SmackManager.getInstance().connectionInstance.addConnectionListener(connectListener)
        }
    }

    var pingManager: PingManager? = null;
    private fun login(csId: String?, isReconnet: Boolean = false) {
        if (!AppBusManager.isLogin()) {
            stopSelf()
            return
        }
        if (isReconnet) {
            if (SmackManager.getInstance().connectionInstance.isConnected) {
                SmackManager.getInstance().connectionInstance.disconnect()
            }
        }
        var tag = 0
        LogTools.debug("IMService", "onStartCommand")
        val disposable = Observable.just(true).flatMap {
            if (SmackManager.getInstance().isAuthenticated) {
                //告诉客服上线了
                setOnline()
                return@flatMap Observable.just(true)
            }
            SmackManager.getInstance().login(AppBusManager.getUsername(), AppBusManager.getUsername())
            val result = SmackManager.getInstance().isAuthenticated
            if (result) {
                tag = 2
                IMBusManager.setUser(User(AppBusManager.getUsername(), AppBusManager.getUsername(), AppBusManager.getUsername()))
                LogTools.debug("IMService", "loginSuccess")

                //设置监听器
                if (!isAdded) {
                    SmackManager.getInstance().addFileTransferListener(fileTransferListener)
                    SmackManager.getInstance().chatManager.addIncomingListener(incomingChatMessageListener)
                    val listenners = ReflectionUtils.getFieldValue(SmackManager.getInstance().chatManager, "incomingListeners") as Set<*>
                    LogTools.debug("IMService", listenners)
                    PingManager.setDefaultPingInterval(10)//Ping every 10 seconds
                    pingManager = PingManager.getInstanceFor(SmackManager.getInstance().connection)
                    //Set PingListener here to catch connect status
                    pingManager!!.registerPingFailedListener(pingFailedListener)
                    SmackManager.getInstance().connection.addAsyncStanzaListener(stanzaListener, AndFilter(StanzaTypeFilter(Presence::class.java)))
                    isAdded = true
                }

                //告诉客服上线了
                setOnline()

                rxTimer.cancel()

                if (TextUtils.isEmpty(csId)) {
                    return@flatMap Observable.just(true)
                } else {
                }
                //登录成功加好友
                return@flatMap addFriend()
            } else {
                return@flatMap Observable.error<Boolean>(ApiException("登录失败", ErrorStatus.API_ERROR))
            }
        }.flatMap {
            if (it) { //登录成功
               addOfflineMessage()
            } else {
                return@flatMap Observable.error<Boolean>(ApiException("登录失败", ErrorStatus.API_ERROR))
            }
            return@flatMap Observable.just(true)
        }.compose(SchedulerUtils.ioToMain()).subscribe({ bean ->
            //toast("即时通讯登录成功"+tag)
            val event = ConnectSuccessEvent()
            event.user = User(AppBusManager.getUsername(), AppBusManager.getUsername(), AppBusManager.getUsername())
            event.tag = tag
            EventBus.getDefault().post(event)

        }, { throwable ->
            //处理异常
            stopSelf()
            ExceptionHandle.handleException(throwable)
            toast(ExceptionHandle.errorMsg)
        })
        addSubscription(disposable)

    }

    /**
     * 告诉客服上线
     */
    private fun setOnline(){
        val presence = Presence(Presence.Type.available)
        presence.mode = Presence.Mode.available
        SmackManager.getInstance().connection.sendStanza(presence)
        if (!TextUtils.isEmpty(csId)) {
            val presenceTo = Presence(JidCreate.entityBareFrom(SmackManager.getInstance().getChatJid(csId)), Presence.Type.available)
            presenceTo.mode = Presence.Mode.available
            SmackManager.getInstance().connection.sendStanza(presenceTo)
        }
    }
    /**
     * 添加客服朋友
     */
   private fun addFriend():Observable<Boolean>{
        //登录成功加好友
        val friends = SmackManager.getInstance().allFriends
        var flag = false
        for (f in friends) {
            if (f.name != null && f.name.contains(csId!!)) {
                flag = true
                break
            }
        }
        for (f in friends) {
            LogTools.debug(f.name)
        }
        if (flag) {
            return Observable.just(true)
        } else {
            flag = SmackManager.getInstance().addFriend(csId, csId, null)
            if (flag) {
                val entry = SmackManager.getInstance().getFriend(csId)
                return Observable.just(true)
            } else {
                return Observable.error<Boolean>(ApiException("加好友失败", ErrorStatus.API_ERROR))
            }
        }
    }

    /**
     * 添加离线消息
     */
   private fun addOfflineMessage(){
        //接收离线消息
//                val offlineManager = OfflineMessageManager(SmackManager.getInstance().connection)
//                val messages = offlineManager.messages
//                for (m in messages) {
//                    if (!TextUtils.isEmpty(m.body)) {
//                        val msg = IMBusManager.saveRecvTextMsgToLocal<MsgBody>(m, true)
//                        IMBusManager.updateRecord(msg!!)
//                    }
//                }
//                //删除离线消息
//                offlineManager.deleteMessages()
        //将状态设置成在线
//                val presence = Presence(Presence.Type.available)
//                presence.mode = Presence.Mode.available
//                SmackManager.getInstance().connection.sendStanza(presence)
    }


    var rxTimer: RxTimer = RxTimer()
    var isAdded = false
    var csId: String? = null
    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        csId = intent?.getStringExtra("csId")
        login(csId)
        return super.onStartCommand(intent, flags, startId)
    }


    override fun onDestroy() {
        super.onDestroy()
        LogTools.debug("IMService", "onDestroy")
        isAdded = false
        rxTimer.cancel()
        val disposable = Observable.just(true).flatMap {
            pingManager?.unregisterPingFailedListener(pingFailedListener)
            SmackManager.getInstance().fileTransferManager.removeFileTransferListener(fileTransferListener)
            SmackManager.getInstance().chatManager.removeIncomingListener(incomingChatMessageListener)
            val listenners = ReflectionUtils.getFieldValue(SmackManager.getInstance().chatManager, "incomingListeners") as Set<*>
            LogTools.debug("IMService", listenners.size)
            SmackManager.getInstance().connection.removeAsyncStanzaListener(stanzaListener)
            //SmackManager.getInstance().logout()
            SmackManager.getInstance().disconnect()
            SmackManager.getInstance().connectionInstance.removeConnectionListener(connectListener)
            LogTools.debug("IMService", "disconnect")
            return@flatMap Observable.just(true)
        }.compose(SchedulerUtils.ioToMain()).subscribe({ bean ->

        }, { throwable ->
            //处理异常
            ExceptionHandle.handleException(throwable)
            toast(ExceptionHandle.errorMsg)
        })
        // addSubscription(disposable)
        clearSubscription()
    }
}