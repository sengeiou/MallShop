package com.mike.baselib.net

import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.mike.baselib.net.gson.DoubleDefault0Adapter
import com.mike.baselib.net.gson.FloatDefault0Adapter
import com.mike.baselib.net.gson.IntegerDefault0Adapter
import com.mike.baselib.net.gson.LongDefault0Adapter
import com.mike.baselib.utils.*
import com.tencent.bugly.crashreport.BuglyLog
import okhttp3.*
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory
import retrofit2.converter.gson.GsonConverterFactory
import java.io.File
import java.io.IOException
import java.net.URLEncoder
import java.nio.charset.Charset
import java.util.concurrent.TimeUnit


object RetrofitManager {
    //    val service: ApiService by lazy (LazyThreadSafetyMode.SYNCHRONIZED){
//        getRetrofit().create(ApiService::class.java)
//    }
    val logTools = LogTools(this.javaClass.simpleName)
    private var token: String by Preference("token", "")


    /**
     * 设置公共参数
     */
    private fun addQueryParameterInterceptor(): Interceptor {
        return Interceptor { chain ->
            val originalRequest = chain.request()
            val request: Request
            val modifiedUrl = originalRequest.url().newBuilder()
                    // Provide your custom parameter here
                    // .addQueryParameter("udid", "")
//                    .addQueryParameter("Authorization", AppBusManager.getToken())
//                    .addQueryParameter("resource", "3")//安卓平台
//                    .addQueryParameter("language", AppBusManager.getAppLanguage())//语言
                    .build()
            request = originalRequest.newBuilder().url(modifiedUrl).build()
            chain.proceed(request)
        }
    }

    /**
     * 设置头
     */
    private fun addHeaderInterceptor(): Interceptor {
        return Interceptor { chain ->
            val originalRequest = chain.request()
            val requestBuilder = originalRequest.newBuilder()
                    // Provide your custom header here
                    .header("Authorization", "Bearer " + AppBusManager.getToken())
                    .header("resource", "5") //app 安卓
                    .header("version", "1.1") //app 安卓
                    .header("language", AppBusManager.getAppLanguage())
                    //.header("itemName", android.os.Build.DEVICE)
                    .header("itemName", URLEncoder.encode(AppBusManager.getDeviceName(), "UTF-8"))
                    .header("itemId", AppBusManager.getUuid())
                    // .addHeader("Content type","application/json")
                    .method(originalRequest.method(), originalRequest.body())
            val request = requestBuilder.build()
            chain.proceed(request)
        }
    }

    /**
     * 设置缓存
     */
//    private fun addCacheInterceptor(): Interceptor {
//        return Interceptor { chain ->
//            var request = chain.request()
//            if (!NetworkUtil.isNetworkAvailable(AppContext.getInstance().context)) {
//                request = request.newBuilder()
//                        .cacheControl(CacheControl.FORCE_CACHE)
//                        .build()
//            }
//            val response = chain.proceed(request)
//            if (NetworkUtil.isNetworkAvailable(AppContext.getInstance().context)) {
//                val maxAge = 0
//                // 有网络时 设置缓存超时时间0个小时 ,意思就是不读取缓存数据,只对get有用,post没有缓冲
//                response.newBuilder()
//                        .header("Cache-Control", "public, max-age=" + maxAge)
//                        .removeHeader("Retrofit")// 清除头信息，因为服务器如果不支持，会返回一些干扰信息，不清除下面无法生效
//                        .build()
//            } else {
//                // 无网络时，设置超时为4周  只对get有用,post没有缓冲
//                val maxStale = 60 * 60 * 24 * 28
//                response.newBuilder()
//                        .header("Cache-Control", "public, only-if-cached, max-stale=" + maxStale)
//                        .removeHeader("nyn")
//                        .build()
//            }
//            response
//        }
//    }
    /**
     * 有网时候的缓存
     */
    val NetCacheInterceptor: Interceptor = object : Interceptor {
        @Throws(IOException::class)
        override fun intercept(chain: Interceptor.Chain): Response {
            val request = chain.request()
            val onlineCacheTimeStr = request.header(Constants.HEADER_ONLINE_CACHETIME)
            var onlineCacheTime = 0 //在线的时候的缓存过期时间，如果想要不缓存，直接时间设置为0
            if (onlineCacheTimeStr != null && onlineCacheTimeStr.ext_isPureNumber_orDecimal()) {
                onlineCacheTime = onlineCacheTimeStr.toInt()
            }
            logTools.d(onlineCacheTime)
            if (NetworkUtil.isNetworkAvailable(AppContext.getInstance().context)) {
                val response = chain.proceed(request)
                return response.newBuilder()
                        .header("Cache-Control", "public, max-age=$onlineCacheTime")
                        .removeHeader("Pragma")
                        .build()
            }
            return chain.proceed(request)
        }
    }

    /**
     * 没有网时候的缓存
     */
    val OfflineCacheInterceptor: Interceptor = object : Interceptor {
        @Throws(IOException::class)
        override fun intercept(chain: Interceptor.Chain): Response {
            var request = chain.request()
            var offlineCacheTime = 0//离线的时候的缓存的过期时间
            val offlineCacheTimeStr = request.header(Constants.HEADER_OFFLINE_CACHETIME)
            if (offlineCacheTimeStr != null && offlineCacheTimeStr.ext_isPureNumber_orDecimal()) {
                offlineCacheTime = offlineCacheTimeStr.toInt()
            }
            logTools.d(offlineCacheTime)
            if (!NetworkUtil.isNetworkAvailable(AppContext.getInstance().context)) {
                request = request.newBuilder()
                        //                        .cacheControl(new CacheControl
                        //                                .Builder()
                        //                                .maxStale(60,TimeUnit.SECONDS)
                        //                                .onlyIfCached()
                        //                                .build()
                        //                        ) 两种方式结果是一样的，写法不同
                        .header("Cache-Control", "public, only-if-cached, max-stale=$offlineCacheTime")
                        .build()
            }
            return chain.proceed(request)
        }
    }

    fun getRetrofit(): Retrofit {
        return getRetrofit(AppConfig.getBaseurl())
    }

    /**
     * 服务器错误返回的是"" ,前端用对像接收 拦截器处理
     */
    private fun EmptyStringHanlderInterceptor(): Interceptor {
        return Interceptor { chain ->
            var response = chain.proceed(chain.request())
            var bodyString = response.body()!!.string()
            bodyString = bodyString.replace("\"result\":\"\"", "\"result\":{}")
            response = response.newBuilder().body(ResponseBody.create(response.body()!!.contentType(), bodyString)).build()
            response
        }
    }

    /**
     * 加密签名处理
     */
    class EncryptInterceptor : Interceptor {
        override fun intercept(chain: Interceptor.Chain): Response {
            var request = chain.request()
            //这个是请求的url，也就是咱们前面配置的baseUrl
            val url = request.url().toString()
            //这个是请求方法
            val method = request.method()
            if (url.contains(Constants.OPEN)&&!url.contains(Constants.FIND_PASSWORD)&&!url.contains(Constants.REGISTER)) {
                return chain.proceed(request)
            }
            request = encrypt(request)//加密方法
            var response = chain.proceed(request)
            if (url.contains(Constants.LOGIN)) { //暂时只有登录需要解密
                response = decrypt(response)
            }
            return response
        }
    }

    //加密
    private fun encrypt(req: Request): Request {
        var request = req
        //获取请求body，只有@Body 参数的requestBody 才不会为 null
        val requestBody = request.body()
        if (requestBody != null) {
            val buffer = okio.Buffer()
            requestBody.writeTo(buffer)
            var charset = Charset.forName("UTF-8")
            val contentType = requestBody.contentType()
            if (contentType != null) {
                charset = contentType.charset(charset)
            }
            val string = buffer.readString(charset)
            logTools.d(request.url().toString())
            logTools.d(string)
            //加密
            val encryptStr = AppBusManager.encryptJson(request.url().toString(), string)
            val body = MultipartBody.create(contentType, encryptStr)
            request = request.newBuilder()
                    .post(body)
                    .build()

        }
        return request
    }

    private fun decrypt(resp: Response): Response {
        var response = resp
        if (response.isSuccessful) {
            //the response data
            val body = response.body() ?: return response
            val source = body.source()
            source.request(java.lang.Long.MAX_VALUE) // Buffer the entire body.
            val buffer = source.buffer()
            var charset = Charset.defaultCharset()
            val contentType = body.contentType()
            if (contentType != null) {
                charset = contentType.charset(charset)
            }
            val string = buffer.clone().readString(charset)
            //解密
            val bodyString = AppBusManager.decryptJson(response.request().url().toString(),string)
            val responseBody = ResponseBody.create(contentType, bodyString)
            response = response.newBuilder().body(responseBody).build()
        }
        return response
    }


    fun getRetrofit(url: String): Retrofit {
        // 获取retrofit的实例
        return Retrofit.Builder()
                .baseUrl(url)  //自己配置
                .client(getOkHttpClient())
                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                .addConverterFactory(GsonConverterFactory.create(buildGson()))
                .build()
    }

    private fun getOkHttpClient(): OkHttpClient {
        //添加一个log拦截器,打印所有的log
        //可以设置请求过滤的水平,body,basic,headers

        val httpLoggingInterceptor = HttpLoggingInterceptor(HttpLoggingInterceptor.Logger {
            logTools.d(it)
            //BuglyLog.d("Bugly_Net", it)
        })

        httpLoggingInterceptor.level = HttpLoggingInterceptor.Level.BODY

        //设置 请求的缓存的大小跟位置
        val cacheFile = File(AppContext.getInstance().context.cacheDir, "cache")
        val cache = Cache(cacheFile, 1024 * 1024 * 50) //50Mb 缓存的大小

        return OkHttpClient.Builder()
                .addInterceptor(addQueryParameterInterceptor())  //参数添加
                .addInterceptor(addHeaderInterceptor()) // token过滤
//              .addInterceptor(addCacheInterceptor())
                .addNetworkInterceptor(NetCacheInterceptor)
                .addInterceptor(OfflineCacheInterceptor)
                .addInterceptor(EncryptInterceptor())
                .addInterceptor(httpLoggingInterceptor) //日志,所有的请求响应度看到
                .addInterceptor(EmptyStringHanlderInterceptor())
                .cache(cache)  //添加缓存
                .connectTimeout(15L, TimeUnit.SECONDS)
                .readTimeout(15L, TimeUnit.SECONDS)
                .writeTimeout(15L, TimeUnit.SECONDS)
                .build()
    }

    /**
     * 增加后台返回""和"null"的处理
     * 1.int=>0
     * 2.double=>0.00
     * 3.long=>0L
     * 4.flat=>0F
     *
     * @return
     */
    fun buildGson(): Gson {
        return GsonBuilder()
                .registerTypeAdapter(Int::class.java, IntegerDefault0Adapter())
                .registerTypeAdapter(Int::class.javaPrimitiveType, IntegerDefault0Adapter())
                .registerTypeAdapter(Double::class.java, DoubleDefault0Adapter())
                .registerTypeAdapter(Double::class.javaPrimitiveType, DoubleDefault0Adapter())
                .registerTypeAdapter(Long::class.java, LongDefault0Adapter())
                .registerTypeAdapter(Long::class.javaPrimitiveType, LongDefault0Adapter())
                .registerTypeAdapter(Float::class.java, FloatDefault0Adapter())
                .registerTypeAdapter(Float::class.javaPrimitiveType, FloatDefault0Adapter())
                .create()
    }

}
