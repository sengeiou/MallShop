package com.epro.mall.mvp.model

import com.autonavi.base.amap.mapcore.AeUtil
import com.mike.baselib.net.exception.ApiException
import com.mike.baselib.net.exception.ErrorStatus
import com.mike.baselib.rx.scheduler.SchedulerUtils
import com.epro.mall.listener.RetryWithDelay
import com.epro.mall.mvp.model.bean.GetVfBean
import com.epro.mall.mvp.model.bean.LoginBean
import com.epro.mall.mvp.model.bean.MyInfoBean
import com.mike.baselib.utils.AESUtils
import com.mike.baselib.utils.AppBusManager
import com.mike.baselib.utils.EncryptUtil
import io.reactivex.Observable

class LoginModel : BaseModel() {
    /**
     * 登录
     */
//    fun login(account: String, password: String, type: String): Observable<LoginBean> {
//        return getApiSevice().login(LoginBean.Send(account, password, type))
//                .flatMap {
//                    if (it.code == ErrorStatus.SUCCESS) {
//                        return@flatMap Observable.just(it)
//                    } else {
//                        return@flatMap Observable.error<LoginBean>(ApiException(it.message, it.code))
//                    }
//                }
//                .retryWhen(RetryWithDelay())
//                .compose(SchedulerUtils.ioToMain())
//    }
    fun login(account: String, password: String, type: String): Observable<LoginBean> {
        return getApiSevice().login(LoginBean.Send(AESUtils.encrypt(account), AESUtils.encrypt(password), type))
                .flatMap {
                    if (it.code == ErrorStatus.SUCCESS) {
                        val bytes = AESUtils.decrypt(it.result)!!
                        logTools.d(String(bytes))
                        val realResult = AppBusManager.fromJson(String(bytes), LoginBean.Result::class.java)
                        it.realResult = realResult
                        return@flatMap Observable.just(it)
                    } else {
                        return@flatMap Observable.error<LoginBean>(ApiException(it.message, it.code))
                    }
                }
                .retryWhen(RetryWithDelay())
                .compose(SchedulerUtils.ioToMain())
    }

    /**
     * 获取验证码
     */
    fun getVfCode(account: String, type: Int): Observable<GetVfBean> {
        return getApiSevice().getVfcode(GetVfBean.Send(account, type))
                .flatMap {
                    if (it.code == ErrorStatus.SUCCESS) {
                        return@flatMap Observable.just(it)
                    } else {
                        return@flatMap Observable.error<GetVfBean>(ApiException(it.message, it.code))
                    }
                }
                .retryWhen(RetryWithDelay())
                .compose(SchedulerUtils.ioToMain())
    }

    //我的基本信息
    fun MyInfo(): Observable<MyInfoBean> {
        return getApiSevice().getMyInfo()
                .flatMap {
                    if (it.code == ErrorStatus.SUCCESS) {
                        return@flatMap Observable.just(it)
                    } else {
                        return@flatMap Observable.error<MyInfoBean>(ApiException(it.message, it.code))
                    }
                }
                .retryWhen(RetryWithDelay())
                .compose(SchedulerUtils.ioToMain())
    }
}
